//HERC01T  JOB (XXXXXXXX,XXXX,1439,9999,9999),TRK0SAVE-HERC01,
//             MSGCLASS=C,CLASS=A,NOTIFY=HERC01,COND=(0,NE)
//ASMFCL  EXEC PROC=ASMFCL
//SYSLIB   DD
//         DD  DISP=SHR,DSN=SYS1.AMODGEN
PASS     TITLE 'TRK0SAVE - - - Program to copy a disk volume track 0'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This program copies records 1, 2, and 4 through the
* end of a disk volume track 0 to a sequential data set.
* Record 3 is the volume label and is not copied.
* Each block in the output data set will have the 8 byte
* disk count field in the front of the data or key and data.
*
*     Use program TRK0UPD to copy back to a disk track 0.
*
* Sample JCL:
*
* //HERC01T  JOB (xxxxxxxx,xxxx,1439,9999,9999),TRK0SAVJ-HERC01,
* //             MSGCLASS=x,CLASS=x,NOTIFY=HERC01
* //TRK0SAVE EXEC PGM=TRK0SAVE
* //SYSUDUMP DD  SYSOUT=*
* //DISKIN   DD  UNIT=SYSDA,SPACE=(TRK,0),VOL=SER=MVSRES
* //OUTPUT   DD  DISP=(,CATLG,DELETE),DSN=HERC01.IPLTEXT.MVS38J,
* //             SPACE=(TRK,1),VOL=REF=SYS1.PARMLIB
*
* Blame: somitcw@yahoo.com
*
* Additional information:
*
* Extracted information from Table 26
* of the DSF Users Guide r16
* Maximum Size Permitted for
* the IPL Program Record
* Maximum Bytes
* Volume Type for IPL Program
* 2311      3,110
* 2314      6,514
* 2319      6,514
* 3340      7,286
* 3344      7,286
* 3330-1   12,117
* 3330-11  12,117
* 2305-1   12,180
* 2305-2   13,616
* 3350     17,902
* 3375     33,984
* 3380     44,948
* 9345     49,938
* 3390     53,450
*
*   The format written by this program does NOT
* match what ICKDSF write IPLTEXT ABSFORMAT expects.
*
* ABSFORMAT wants three or more undefined records.
* The first must be 24 ( X'18' ) bytes.
* The second must be 144 ( X'90' ) bytes.
* The others are written after the volume label as is.
*
* This program includes count and key fields so:
* The first must be 36 bytes ( C+K+D 8+4+24 ).
* The second must be 156 bytes ( C+K+D 8+4+144 ).
* Others are eight bytes larger than data for the
* count field.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         MACRO
         REGS  ,
         LCLA  &COUNT
.LOOP    ANOP
R&COUNT  EQU   &COUNT             Register equate for register &COUNT
&COUNT   SETA  &COUNT+1
         AIF   (16 GT &COUNT).LOOP
         MEND
         SPACE
         PRINT ON,GEN,DATA
TRK0SAVE  CSECT ,
         USING *,R15              Set temporary base register
         SAVE  (14,12),,TRK0SAVE.&SYSDATE..&SYSTIME  Save Reg.s
         LA    R12,SAVEAREA       Load address of new save area
         ST    R12,8(,R13)        Connect old and new save areas
         ST    R13,4(,R12)        Connect old and new save areas
         LR    R13,R12            Connect old and new save areas
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING TRK0SAVE,R12       Give the assembler the new base
         OPEN  (DCBIN,INPUT)      Open the disk to be read
         GETMAIN R,LV=65536       Get Input/Output buffer
         LR    R11,R1             Save I/O buffer address
         STCM  R11,B'0111',CCWREAD+1  Store I/O buffer address in CCW
*
* DEBDVMOD DS    B         DEVICE MODIFIER - FILE MASK
* DEBUCBA  DS    AL3       ADDRESS OF UCB ASSOCIATED WITH THIS DATA
* *                        EXTENT
* DEBBINUM DS    CL2       BIN NUMBER
* DEBSTRCC DS    CL2       CYLINDER ADDRESS FOR THE START OF AN EXTENT.
* DEBSTRHH DS    CL2       TRACK ADDRESS FOR THE START OF AN EXTENT.
* DEBENDCC DS    CL2       CYLINDER ADDRESS FOR THE END OF AN EXTENT.
*
* DEBENDHH DS    CL2       TRACK ADDRESS FOR THE END OF AN EXTENT.
* DEBNMTRK DS    CL2       NUMBER OF TRACKS ALLOCATED TO A GIVEN EXTENT
*
         L     R10,DCBIN+DCBDEBAD-IHADCB  Load DEB address
         LA    R10,DEBBASND-DEBBASIC(,R10)  Find DEBDASD section
         USING DEBDASD,R10        Give the assembler the DEB base
         MVC   SAVEDEB(12),DEBBINUM Save extent to restore later
         MODESET KEY=ZERO         Go to key zero to update DEB
         XC    DEBBINUM(12),DEBBINUM  Set extent to CYL 0 and TRK 0
         MVI   DEBNMTRK+1,1       Set extent size as one track
         MODESET KEY=NZERO        Go back to problem progrem key
READ     DS    0H
         XC    ECB,ECB            Insure that the ECB is clear
         EXCP  IOB                Read track zero
         WAIT  ECB=ECB            Wait for the read to complete
         CLI   ECB,X'7F'          See if a good read
         BNE   IOERROR            If not good, go abend
         MODESET KEY=ZERO         Go to key zero to update DEB
         MVC   DEBBINUM(12),SAVEDEB  Restore DEB extent information
         MODESET KEY=NZERO        Go back to problem program key
         DROP  R10                Don't need DEB address anymore
         SLR   R8,R8              Clear a work register
         L     R9,F65535          Load max. size that could have read
         ICM   R8,B'0011',CSW+6   Load the residual byte count
         SR    R9,R8              Find size of track read
         AR    R9,R11             Find byte after track read
         MVI   0(R9),X'FF'        Mark byte after end as the end
*
* Track zero was read, now write all records except record 3
* Record 3 is the volume label and not needed or wanted
*
         OPEN  (DCBOUT,OUTPUT)    Open the output file
         LR    R9,R11             Load the input track address
PUT      DS    0H
         CLI   0(R9),X'FF'        See if end of track
         BE    ENDOFPGM           Is end of track, go exit the program
         SLR   R7,R7              Clear a second work register
         SLR   R8,R8              Clear a work register
* R9 starts with count CCHHRKLL Cyl, Head(Trk), Rec, Key-len, Data-len
* R9 displacements are 01234567
         IC    R7,5(,R9)          Load key length
         ICM   R8,B'0011',6(R9)   Load data length
         LA    R8,8(R7,R8)        Find length of Count-Key-Data
         CLI   4(R9),X'03'        See if record 3 ( Volume label )
         BE    NOPUT              Is rec.3, do not PUT
         STH   R8,DCBOUT+DCBLRECL-IHADCB  Store length to PUT
         PUT   DCBOUT,(R9)        Write a block
NOPUT    DS    0H
         LA    R9,0(R8,R9)        Find next block to write
         B     PUT                Go to see if another block to PUT
*
ENDOFPGM DS    0H
         CLOSE DCBOUT             Close output file before input file
         CLOSE DCBIN              Close input file, ignore if abend
         FREEMAIN R,LV=65536,A=(R11)  Free Input/Output buffer
         L     R13,4(,R13)        Restore the caller's save area addr.
         RETURN (14,12),RC=0      Return to caller
*
IOERROR  DS    0H
         WTO   'Input/Output error, Program abending',ROUTCDE=11
         ABEND 1234,DUMP          Abend with a dump
         EJECT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DCB's, IOB'S, ECB, and CCW's
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
DCBOUT   DCB   DDNAME=OUTPUT,     DD name                              X
               MACRF=PM,          MACRO Reference is PUT,MOVE          X
               DSORG=PS,          Data Set Organization                X
               RECFM=U,           Record format is undefined           X
               LRECL=0,           Logical record length nonexsistant   X
               BLKSIZE=32760      Block size is maximum
         SPACE
DCBIN    DCB   DDNAME=DISKIN,     DD name                              X
               MACRF=E,           MACRO Reference is EXCP              X
               DSORG=PS           Data Set Organization
* DCBLEN   EQU   *-DCBIN            Length of DCB
IOB      DS    0D                 Input/output Block
         DC    XL4'40000000'      Command chaining used
         DC    A(ECB)             Address of the ECB
CSW      DC    D'0'               Channel Status Word
         DC    A(CCW)             Address of the channel command string
         DC    A(DCBIN)           Address of the Data Control Block
         DC    A(0)               IOB Restart
         DC    XL4'0'             Flags and Counters
SEEK     DC    D'0'               Seek address
SEARCH   EQU   SEEK+3,5           Cylinder, Head, and Record to search
CCHH     EQU   SEEK+3,4           Cylinder and Head to seek to
CC       EQU   SEEK+3,2           Cylinder to seek
HH       EQU   SEEK+5,2           Track to seek to
R        EQU   SEEK+7,1           Record to search for
CCW      CCW   X'31',SEARCH,X'40',5 Search for record zero
         CCW   8,*-8,0,0          TIC back until search complete
CCWREAD  CCW   X'5E',*-*,X'20',65535  Read track zero with SLI
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Workarea and Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
SAVEAREA DC    18F'0'             Register save area
COUNT    DC    XL8'0000000000000000'  Count area CCHHRKLL find rec.zero
ECB      DC    F'0'               Event Control Block
SAVEDEB  DS    XL12               Area to save extent after OPEN
F65535   DC    F'65535'           Size of buffer to read track zero
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         LTORG ,                  Insure literals are before the DSECTs
*
         PRINT GEN
         DCBD  DSORG=PS,DEVD=DA   DSECT for the Data Control Block
         IEZDEB LIST=YES          DSECT for the Data Extent Block
         PRINT NOGEN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Register Equates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         REGS  ,                  User Register equate MACRO
         END   ,                  The end of the program
//LKED.SYSLMOD DD DISP=SHR,DSN=SYS2.LINKLIB
 SETCODE AC(1)
 NAME TRK0SAVE(R)
