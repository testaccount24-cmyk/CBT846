TRK0INIT TITLE 'TRK0INIT - Program to remove IPL text from track 0'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This program removes IPL text from a volume, if it previously
* existed there.  Record 3 of the volume, which points to the VTOC
* location and which contains the Volume ID, remains unchanged.
*
* Sample JCL:
*
* //useridX  JOB (etc.)
* //TRK0SAV1 EXEC PGM=TRK0INIT     (Remove IPL Text from a pack)
* //STEPLIB  DD  DISP=SHR,DSN=SYS1.CBT.LINKLIB
* //SYSUDUMP DD  SYSOUT=*
* //DISKUPD  DD  UNIT=SYSALLDA,SPACE=(TRK,0),VOL=SER=TEST01
* //*
*
* Blame: Sam Golob.  NOT somitcw@yahoo.com.
*        Got help from Rick Fochtman.
*        Original idea came from somitcw@yahoo.com and his other
*          programs, TRK0SAVE and TRK0UPD.  Copied some code
*          from there, but not exactly the same, here.
*
* Format of initted IPL records on a pack was
* extracted from DSF Users Guide R17, Table 56.
*
*  Maximum Size Permitted for
*  the IPL Program Record
*  Maximum Bytes
* Volume Type for IPL Program
* 2311      3,110
* 2314      6,514
* 2319      6,514
* 3340      7,286
* 3344      7,286
* 3330-1   12,117
* 3330-11  12,117
* 2305-1   12,180
* 2305-2   13,616
* 3350     17,902
* 3375     33,984
* 3380     44,948
* 9345     49,938
* 3390     53,450
*
*   The format used by this program does NOT match
* what ICKDSF write IPLTEXT ABSFORMAT expects.
*
* ABSFORMAT wants three or more undefined records.
* The first must be 24 ( X'18' ) bytes.
* The second must be 144 ( X'90' ) bytes.
* The others are written after the volume label as is.
*
* This program includes count and key fields so:
* The first must be 36 bytes ( C+K+D 8+4+24 ).
* The second must be 156 bytes ( C+K+D 8+4+144 ).
* Others are eight bytes larger than data for the
* count field.
*
* Notes from Sam Golob follow:
*
* Input for this program is hardcoded in this program, except for
*  record 3, which is copied from record 3 on the existing pack,
*  and then rewritten back to its place.
*
* Program Logic for TRK0INIT.
*
*  Stage 0.  Records 1 and 2 for an initted pack are hardcoded as
*              constants in this program.  A model Record 3 is coded
*              here too, but it will get overlaid with the real
*              Record 3 (the volume id that points to the VTOC).
*              Finally, a dummy Record 4 is hardcoded in this program,
*              and instead of it getting written, an erase opcode is
*              inserted in the CCW (X'11' instead of X'1D'), and the
*              fourth record is erased, erasing all the other records
*              on Track 0.
*  Stage 1.  GETMAIN a 65535 byte buffer.
*            OPEN DISKUPD DCB for INPUT.
*            Copy entire track 0 into buffer, including count, key,
*              and data of each record.
*            CLOSE DISKUPD DCB.
*  Stage 2.  Bump in the buffer to the count field of Record 3.  Copy
*              the buffer's Record 3 into the program, overlaying the
*              VOL1 storage area.  You now have the contents of
*              the volume's Record 3, copied into the program.
*  Stage 3.  OPEN DISKUPD DCB for UPDAT.
*            Write Count-Key-Data (opcode X'1D') for Record 1,
*              Record 2, Record 3, Erase opcode X'11' for Record 4.
*            CLOSE DISKUPD DCB.
*            FREEMAIN the 65535 byte buffer.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         MACRO
         REGS  ,
         LCLA  &COUNT
.LOOP    ANOP
R&COUNT  EQU   &COUNT             Register equate for register &COUNT
&COUNT   SETA  &COUNT+1
         AIF   (16 GT &COUNT).LOOP
         MEND
         SPACE
         PRINT ON,GEN,DATA
TRK0INIT CSECT ,
         USING *,R15              Set temporary base register
         SAVE  (14,12),,TRK0INIT.&SYSDATE..&SYSTIME Save Reg.s
         LA    R12,SAVEAREA       Load address of new save area
         ST    R12,8(,R13)        Connect old and new save areas
         ST    R13,4(,R12)        Connect old and new save areas
         LR    R13,R12            Connect old and new save areas
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING TRK0INIT,R12       Give the assembler the new base
         OPEN  (DCBUPD,INPUT)     Open DCB to read original Track 0
         GETMAIN R,LV=65536       Get Input/Output buffer
         LR    R11,R1             Save I/O buffer address
         STCM  R11,B'0111',CCWREAD+1  Store I/O buffer address in CCW
*
* DEBDVMOD DS    B         DEVICE MODIFIER - FILE MASK
* DEBUCBA  DS    AL3       ADDRESS OF UCB ASSOCIATED WITH THIS DATA
* *                        EXTENT
* DEBBINUM DS    CL2       BIN NUMBER
* DEBSTRCC DS    CL2       CYLINDER ADDRESS FOR THE START OF AN EXTENT.
* DEBSTRHH DS    CL2       TRACK ADDRESS FOR THE START OF AN EXTENT.
* DEBENDCC DS    CL2       CYLINDER ADDRESS FOR THE END OF AN EXTENT.
*
* DEBENDHH DS    CL2       TRACK ADDRESS FOR THE END OF AN EXTENT.
* DEBNMTRK DS    CL2       NUMBER OF TRACKS ALLOCATED TO A GIVEN EXTENT
*
         L     R10,DCBUPD+DCBDEBAD-IHADCB   Load DEB address
         LA    R10,DEBBASND-DEBBASIC(,R10)  Find DEBDASD section
         USING DEBDASD,R10            Give the assembler the DEB base
         MVC   SAVEDEB(12),DEBBINUM   Save extent to restore later
         MODESET KEY=ZERO             Go to key zero to update DEB
         XC    DEBBINUM(12),DEBBINUM  Set extent to CYL 0 and TRK 0
         MVI   DEBNMTRK+1,1           Set extent size as one track
         MODESET KEY=NZERO            Go back to problem progrem key
READ     DS    0H                 Read entire Track 0 into the buffer
         XC    ECBIN,ECBIN        Insure that the ECB is clear
         EXCP  IOBIN              Read track zero
         WAIT  ECB=ECBIN          Wait for the read to complete
         CLI   ECBIN,X'7F'        See if a good read
         BNE   IOERROR            If not good, go abend
         SLR   R8,R8              Clear a work register
         L     R9,F65535          Load max. size that could have read
         ICM   R8,B'0011',CSWIN+6  Load the residual byte count
         SR    R9,R8              Find size of track read
         AR    R9,R11             Find byte after track read
         MVI   0(R9),X'FF'        Mark byte after end as the end
         MODESET KEY=ZERO         Go to key zero to update DEB
         MVC   DEBBINUM(12),SAVEDEB  Restore DEB extent information
         MODESET KEY=NZERO           Go back to problem program key
         CLOSE DCBUPD             We are done with the reading in
         DROP  R10                Don't need DEB address anymore
* ----------------------------------------------------------------- *
*  Now, you've got the Track 0 image in the buffer.
*  We copy Record 3 into the proper area, and then write out records
*   1, 2, 3, and the dummy record 4, with count-key-data.
* ----------------------------------------------------------------- *
         LR    R9,R11             Load the input track address
         LA    R9,IPLLEN(,R9)     Point to Record 3
         CLI   4(R9),3            Check to see if it is Record 3
         BNE   ERROR1             Not Record 3, error message & quit
         MVC   VOL1(VOL1L),0(R9)  Overlay VOL1 area with real VOL1
* ----------------------------------------------------------------- *
*  Now, we have to put out the new Track 0 information and Dummy
*   out Record 4.
* ----------------------------------------------------------------- *
         OPEN  (DCBUPD,UPDAT)         Now OPEN DCB to update Track 0
         L     R10,DCBUPD+DCBDEBAD-IHADCB   Load DEB address
         LA    R10,DEBBASND-DEBBASIC(,R10)  Find DEBDASD section
         USING DEBDASD,R10            Give the assembler the DEB base
         MVC   SAVEDEB(12),DEBBINUM   Save extent to restore later
         MODESET KEY=ZERO             Go to key zero to update DEB
         XC    DEBBINUM(12),DEBBINUM  Set extent to CYL 0 and TRK 0
         MVI   DEBNMTRK+1,1           Set extent size as one track
         MODESET KEY=NZERO            Go back to problem progrem key
*
OREC1    DS    0H                 Write IPL1
         LA    R1,IPL1            Point to IPL1 record
         LA    R2,IPL1L           Load its length
         STH   R2,CCWUPDO+6       Store key and data length in CCW
         MVI   RO,0               Copy record number to seek
         STCM  R1,7,CCWUPDO+1     Store I/O buffer address in CCW
         MVI   CCWUPDO,X'1D'      Write count key data
         MVC   IOERROR1+X'25'(2),=C'01'  (Diagnostic)
         BAL   R6,EXCP            Write out the record
*
OREC2    DS    0H                 Write IPL2
         LA    R1,IPL2            Point to IPL2 record
         LA    R2,IPL2L           Load its length
         STH   R2,CCWUPDO+6       Store key and data length in CCW
         MVI   RO,1               Copy record number to seek
         STCM  R1,7,CCWUPDO+1     Store I/O buffer address in CCW
         MVI   CCWUPDO,X'1D'      Write count key data
         MVC   IOERROR1+X'25'(2),=C'02'  (Diagnostic)
         BAL   R6,EXCP            Write out the record
*
OVOL1    DS    0H                 Write Record 3
         LA    R1,VOL1            Point to VOL1 record
         LA    R2,VOL1L           Load its length
         STH   R2,CCWUPDO+6       Store key and data length in CCW
         MVI   RO,2               Copy record number to seek
         STCM  R1,7,CCWUPDO+1     Store I/O buffer address in CCW
         MVI   CCWUPDO,X'1D'      Write count key data
         MVC   IOERROR1+X'25'(2),=C'03'  (Diagnostic)
         BAL   R6,EXCP            Write out the record
*
ODUMY    DS    0H                 Erase record 4 to clear track
         LA    R1,DUMY            Point to DUMMY record
         LA    R2,DUMYL           Load its length
         STH   R2,CCWUPDO+6       Store key and data length in CCW
         MVI   RO,3               Copy record number to seek
         STCM  R1,7,CCWUPDO+1     Store I/O buffer address in CCW
         MVI   CCWUPDO,X'11'      Insert "erase" opcode into CCW
         MVC   IOERROR1+X'25'(2),=C'04'  (Diagnostic)
         BAL   R6,EXCP            Erase the record
*
ENDOFPGM DS    0H                 Done. Clean up and get out.
         MODESET KEY=ZERO            Go to key zero to update DEB
         MVC   DEBBINUM(12),SAVEDEB  Restore DEB extent information
         MODESET KEY=NZERO           Go back to problem program key
         DROP  R10                Don't need DEB address anymore
         CLOSE DCBUPD             Close the DCB
         FREEMAIN R,LV=65536,A=(R11)  Free the GETMAINed buffer
         L     R13,4(,R13)        Restore the caller's save area addr.
         RETURN (14,12),RC=0      Return to caller
*
IOERROR  DS    0H
         WTO   'Input/Output error, Program abending',ROUTCDE=11
         ABEND 1234,DUMP          Abend with a dump
         EJECT
IOERROR1 DS    0H
         WTO   'Input/Output error, Code = xx ',ROUTCDE=11
         ABEND 1235,DUMP          Abend with a dump
         EJECT
ERROR1   DS    0H
         WTO   'Volume id not copied, Program abending',ROUTCDE=11
         ABEND 1248,DUMP          Abend with a dump
         EJECT
*
EXCP     DS    0H                 Routine to write a record.
         ST    R6,SAVER6A         Save BAL register.
         XC    ECBOUT,ECBOUT      Insure that the ECB is clear
         EXCP  IOBOUT             Update or add record to track zero
         WAIT  ECB=ECBOUT         Wait for the update to complete
*        CLI   ECBOUT,X'7F'
         TM    ECBOUT,X'40'       See if a good count-key-data write
*        BNE   IOERROR1           You don't need to test full X'7F'
         BZ    IOERROR1           If not good, go abend
         L     R6,SAVER6A         Restore BAL register.
         BR    R6
*
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DCB's, IOB'S, ECB, and CCW's
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
DCBUPD   DCB   DDNAME=DISKUPD,    DD name                              X
               MACRF=E,           MACRO Reference is EXCP              X
               DSORG=PS           Data Set Organization
* DCBLEN   EQU   *-DCBOUT           Length of DCB
*  ---  IOB for Input from Track 0
IOBIN    DS    0D                 Input/output Block
         DC    XL4'40000000'      Command chaining used
         DC    A(ECBIN)           Address of the ECB
CSWIN    DC    D'0'               Channel Status Word
         DC    A(CCWIN)           Address of the channel command string
         DC    A(DCBUPD)          Address of the Data Control Block
         DC    A(0)               IOB Restart
         DC    XL4'0'             Flags and Counters
SEEKI    DC    D'0'               Seek address
SEARCHI  EQU   SEEKI+3,5          Cylinder, Head, and Record to search
CCHHI    EQU   SEEKI+3,4          Cylinder and Head to seek to
CCI      EQU   SEEKI+3,2          Cylinder to seek
HHI      EQU   SEEKI+5,2          Track to seek to
RI       EQU   SEEKI+7,1          Record to search for
CCWIN    CCW   X'31',SEARCHI,X'40',5 Search for record zero
         CCW   8,*-8,0,0          TIC back until search complete
CCWREAD  CCW   X'5E',*-*,X'20',65535  Read track zero with SLI
*  ---  IOB for Output to Track 0
IOBOUT   DS    0D                 Input/output Block for Output
         DC    XL4'40000000'      Command chaining used
         DC    A(ECBOUT)          Address of the ECB
CSWOUT   DC    D'0'               Channel Status Word
         DC    A(CCWOUT)          Address of the channel command string
         DC    A(DCBUPD)          Address of the Data Control Block
         DC    A(0)               IOB Restart
         DC    XL4'0'             Flags and Counters
SEEKO    DC    D'0'               Seek address
SEARCHO  EQU   SEEKO+3,5          Cylinder, Head, and Record to search
CCHHO    EQU   SEEKO+3,4          Cylinder and Head to seek to
CCO      EQU   SEEKO+3,2          Cylinder to seek
HHO      EQU   SEEKO+5,2          Track to seek to
RO       EQU   SEEKO+7,1          Record to search for
CCWOUT   CCW   X'31',SEARCHO,X'40',5 Srch for record before one written
         CCW   8,*-8,0,0          TIC back until search complete
CCWUPDO  CCW   X'1D',*-*,0,*-*    Update key-data,write count-key-data
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Workarea and Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
SAVEAREA DC    18F'0'             Register save area
ECBIN    DC    F'0'               Event Control Block
ECBOUT   DC    F'0'               Event Control Block
SAVEDEB  DS    XL12               Area to save extent after OPEN
SAVER6A  DC    F'0'
H8       DC    H'8'               Constant for subtraction
F65535   DC    F'65535'           Buffer size
* ------ >>   below     Init track images
IPL1     DS    0XL36              Canned IPL1 record
IPL1R    DC    X'0000000001'               5
IPL1KL   DC    X'040018'                   3
IPL1K    DC    C'IPL1'                     4   =  12
         DC    X'000A00000000000F'         8
         DC    X'0300000000000001'         8
         DC    X'0000000000000000'         8   =  24 + 12  =  36
IPL1L    EQU   *-IPL1             IPL1 record length incl count
* -----
IPL2     DS    0XL156             Canned IPL2 record
IPL2R    DC    X'0000000002'               5
IPL2KL   DC    X'040090'                   3
IPL2K    DC    C'IPL2'                     4   =  12
         DC    X'07003AB840000006'         8
         DC    X'31003ABE40000005'         8
         DC    X'08003AA000000000'         8
         DC    X'0600000020000000'         8
         DC    X'0000000000000000'         8   =  40 + 12  =  52
         DC    X'000004'                   3   +  52  =  55
         DC    XL101'00'                   101 +  55  = 156
IPL2L    EQU   *-IPL2             IPL2 record length incl count
* -----
IPLLEN   EQU   *-IPL1             Length of both IPL records
* -----
VOL1     DS    0XL96              VOLUME ID record - will be overlaid
VOL1R    DC    X'0000000003'                  5
VOL1KL   DC    X'040050'                      3
VOL1K    DC    C'VOL1'                        4   =  12
         DC    C'VOL1'                        4
VOL1SER  DC    CL6' '                         6
         DC    C' '                           1
         DC    XL5'0000000101' (LOC OF VTOC)  5   =  16 + 12 = 28
         DC    CL68' '
VOL1L    EQU   *-VOL1             VOL1 record length incl count
* ------ >>   above     Init track images
DUMY     DS    0XL9               Dummy record to blank rest of track
DUMYR    DC    X'0000000004'                  5
DUMYKL   DC    X'000001'                      3
DUMYZ    DC    X'00'                          1
DUMYL    EQU   *-DUMY
* -----
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         LTORG ,                  Insure literals are before the DSECTs
*
         PRINT GEN
         DCBD  DSORG=PS,DEVD=DA   DSECT for the Data Control Block
         IEZDEB LIST=YES          DSECT for the Data Extent Block
         PRINT NOGEN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Register Equates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         REGS  ,                  User Register equate MACRO
         END   ,                  The end of the program
