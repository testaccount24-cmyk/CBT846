ONLCLIP  TITLE  'ONLCLIP - Program to change the VOLSER of a disk pack'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
* * * *    CHANGE THE VOLSER OF A DISK PACK WHEN IT IS ONLINE   * * * *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This program changes the volume serial of a disk pack, without
* affecting any IPL text that is there as well.  The disk pack has to
* be online.
*
*     This program requires RACF authority:  READ access to FACILITY
* class, profile TBCXTUL.
*
* Sample JCL:
* //*
* //* Purpose of this program is to change the VOLSER of a volume,
* //*  while it is online.  The PARM field contains the new volume id.
* //*
* //useridX  JOB (etc.)
* //ONLCLIP  EXEC PGM=ONLCLIP,PARM='test03'    (program uppercases it)
* //STEPLIB  DD  DISP=SHR,DSN=SYS1.CBT.LINKLIB
* //SYSPRINT DD  SYSOUT=*
* //SYSUDUMP DD  SYSOUT=*
* //DISKUPD  DD  UNIT=SYSALLDA,SPACE=(TRK,0),VOL=SER=TEST02
* //*
*
* Blame: Sam Golob.  NOT somitcw@yahoo.com.
*        Got help from Rick Fochtman.
*        Cobbled this code from TRK0INIT.  Only change the volser
*          of the pack, and do not disturb any IPL text that is
*          already there.
*
*  Maximum Size Permitted for
*  the IPL Program Record
*  Maximum Bytes
* Volume Type for IPL Program
* 2311      3,110
* 2314      6,514
* 2319      6,514
* 3340      7,286
* 3344      7,286
* 3330-1   12,117
* 3330-11  12,117
* 2305-1   12,180
* 2305-2   13,616
* 3350     17,902
* 3375     33,984
* 3380     44,948
* 9345     49,938
* 3390     53,450
*
*
* Notes from Sam Golob follow:
*
* Input for this program is a new volume serial which is in the
*  PARM field.  After changing the volume serial of the pack, to
*  "make it offiical", you have to take the pack offline and
*  bring it online again.  In the old days, you also had to do a
*  MOUNT command, but that was eliminated around the middle of
*  the OS/390 time, I think.
*
* Requires READ access to the FACILITY class profile TBCXTUL.
*  (CBT spelled backwards, X, TUL for tool.)
*
* Program Logic for ONLCLIP.
*
*  Stage 0.  OPEN SYSPRINT.
*            Print the header, and get the value of the new volser
*              from the JCL PARM field.  Save it in the program.
*
*  Stage 0A. RACF protection to use the program. Tests READ access
*              to the FACILITY class, profile TBCXTUL.
*
*  Stage 1.  GETMAIN a 65535 byte buffer.
*            OPEN DISKUPD DCB for INPUT.
*            Copy entire track 0 into buffer, including count, key,
*              and data of each record.
*            CLOSE DISKUPD DCB.
*
*  Stage 2.  Now we will see what to do with this data.
*            Records 1 and 2 are not disturbed.  The CCW opcode is a
*              no-op.
*
*  Stage 3.  Bump in the buffer to the count field of Record 3.
*            Copy the previous volser to a saved location, and save
*              the contents of the VTOC location field as well.
*            Save all of the rest of the Record 3 data into the
*              program except the volser.
*            Copy the buffer's Record 3 into the program, overlaying
*              the VOL1 storage area.  You now have the contents of
*              the volume's Record 3, copied into the program.  (This
*              process has been kludged, but it works, because we then
*              forcibly overlay the unchanged part of Record 3 with
*              all the previous unchanged data, besides the volser
*              field.)  The volser field is then overlaid with the
*              saved PARM data, after having been uppercased.
*
*  Stage 4.  OPEN DISKUPD DCB for UPDAT.
*            Copy the previous volser from its saved location to the
*              report.  Copy the new volser from its save area to the
*              report.  Do not change the rest of Record 3, and write
*              the record back in place.  X'85' is the "update in
*              place" opcode, which doesn't destroy the subsequent
*              records in the rest of Track 0.  So only the volume
*              serial of the pack is changed, and not the rest of
*              Record 3.  Any IPL text which is subsequent to Record
*              3, is also not disturbed.
*            CLOSE DISKUPD DCB.
*
*  Stage 5.  FREEMAIN the 65535 byte buffer.
*            CLOSE SYSPRINT.
*            End the program.
*
*            If no PARM was coded, get out with an informative message.
*            If no READ access to FACILITY class, profile TBCXTUL,
*              then get out with an appropriate error message.
*
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*
*  Return Code 4 comes when no parms have been coded in the JCL.
*
*  Changes:  Version 1.1 - 02/09/2020 - Initial release.
*
*            Version 1.2 - 02/10/2020 - Time and Date of Execution
*
*            Version 1.3 - 02/16/2020 - UCB messages - unit address
*                                        and volume serial
*
*            Version 1.4 - 02/16/2020 - WTO messages including unit
*                                        address and volume serial
*
*            Version 1.5 - 02/23/2020 - RACF protection. Needs FACILITY
*                                        CLASS profile TBCXTUL and
*                                        READ access, to work.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         MACRO
         REGS  ,
         LCLA  &COUNT
.LOOP    ANOP
R&COUNT  EQU   &COUNT             Register equate for register &COUNT
&COUNT   SETA  &COUNT+1
         AIF   (16 GT &COUNT).LOOP
         MEND
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R9,SAV9HEX
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R9,HEX
         L     R9,SAV9HEX
         LM    R15,R1,HEXSAVE
         MEND
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         PRINT ON,GEN,DATA
ONLCLIP  CSECT ,
ONLCLIP  RMODE 24
ONLCLIP  AMODE 31
         USING *,R15              Set temporary base register
         SAVE  (14,12),,ONLCLIP.&SYSDATE..&SYSTIME Save Reg.s
         LA    R12,SAVEAREA       Load address of new save area
         ST    R12,8(,R13)        Connect old and new save areas
         ST    R13,4(,R12)        Connect old and new save areas
         LR    R13,R12            Connect old and new save areas
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING ONLCLIP,R12,R7     Give the assembler the new bases
         LA    R7,2048(,R12)
         LA    R7,2048(,R7)
         ST    R1,SAVER1A         Save PARM pointer
         OPEN  (DCBUPD,INPUT)     Open DCB to read original Track 0
         GETMAIN R,LV=65536       Get Input/Output buffer
         LR    R11,R1             Save I/O buffer address
         STCM  R11,B'0111',CCWREAD+1  Store I/O buffer address in CCW
*
* ----- >                         At this point we read the PARM
*                                 field to obtain the new volser.
INITCON  DS    0H
         MVI   FLAG0,X'00'
TESTPARM DS    0H
         OPEN  (SYSPRINT,OUTPUT)
***********************************************************************
*                    GET SYSTEM DATE AND TIME                         *
***********************************************************************
         STM   R14,R2,SAVE1402
         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY
         OI    DATE+4,X'0F'
         UNPK  DATED,DATE
         OI    TIME+3,X'0F'
         UNPK  TIMED,TIME
*                          FILL HEADER AREA WITH INFO TO REUSE
         MVC   HEADERD+9(2),DATED
         MVI   HEADERD+9+2,C'/'
         MVC   HEADERD+9+3(2),DATED+2
         MVI   HEADERD+9+5,C'/'
         MVC   HEADERD+9+6(4),DATED+4
         MVC   HEADERD+25+7(2),TIMED
         MVI   HEADERD+25+9,C':'
         MVC   HEADERD+25+10(2),TIMED+2
         MVI   HEADERD+25+12,C':'
         MVC   HEADERD+25+13(2),TIMED+4
         LM    R14,R2,SAVE1402
*
*             PRINT PROGRAM TITLE
*
         MVI   OUTLINE-1,X'40'
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(34),HEADER
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(34),HEADERU
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(34),HEADERT
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(34),HEADERX
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(46),HEADERD
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
***********************************************************************
*                                                                     *
*  CHECK THE AUTHORITY OF THE USER TO SAF CLASS "FACILITY' FOR        *
*  ENTITY "TBCXTUL".  NOTE THAT FASTAUTH IS USED.  TO AVOID THE       *
*  SITUATION WHERE SPECIAL ATTRIBUTES OF THE USER MAY ALLOW THE       *
*  ACCESS WITH LOGGING, A CHECK IS MADE FOR A NON-ZERO REASON         *
*  CODE.  THIS CONDITION WILL BE CONSIDERED A FAILURE.                *
*                                                                     *
***********************************************************************
         NOP   TESTEND
TEST0    RACROUTE REQUEST=LIST,WORKA=RACWORK,CLASS=FACILITY,           X
               ENVIR=CREATE,                                           X
               GLOBAL=YES,                                             X
               RELEASE=2.2,                                            X
               MF=S
***********************************************************************
*        TEST TBCXTUL  IN THE FACILITY CLASS                          *
***********************************************************************
TEST1    MVC   RESOURCE,=CL44'TBCXTUL  '
         RACROUTE REQUEST=FASTAUTH,WORKA=RACWORK,WKAREA=FRACWORK,      X
               ENTITY=RESOURCE,CLASS=FACILITY,ATTR=READ,               X
               MF=(E,RACROUTE)
         LTR   R15,R15             TEST THE RETURN CODE
         BNZ   TESTBAD             NOT ZERO, NOT AUTHORIZED
         CLC   RACROUTE+4(4),=F'0' TEST THE REASON CODE
         BNE   TESTBAD             ZERO, FULLY AUTHORIZED
         B     TESTOK
***********************************************************************
TESTBAD  DS    0H
TESTFAIL MVC   RESOURCE,=CL44' '
         OI    FLAG0,X'02'
***********************************************************************
***********************************************************************
*        CLEANUP AFTER RACROUTE                                       *
***********************************************************************
TESTOK   RACROUTE REQUEST=LIST,WORKA=RACWORK,CLASS=FACILITY,           X
               ENVIR=DELETE,                                           X
               RELEASE=2.2,                                            X
               MF=S
         TM    FLAG0,X'02'
         BO    NOTAUTHR
TESTEND  DS    0H
         EJECT
***********************************************************************
*
*             GET THE NEW VOLSER FROM THE PARM FIELD
*
***********************************************************************
         L     R1,SAVER1A          RESTORE PARM POINTER
         LTR   R1,R1               ANY PARM POINTER?
         BZ    NOPARMS             B IF NOT.
         L     R3,0(,R1)           POINT TO BUFFER
         LTR   R3,R3               ANY?
         BZ    NOPARMS             B IF NOT.
         LH    R4,0(R3)            LOAD LENGTH.
         LTR   R4,R4               ANY?
         BZ    NOPARMS             B IF NOT.
         LA    R3,2(,R3)           POINT TO PARM.
PARM     OC    0(6,R3),=CL6' '          UPPERCASE.
         MVC   SAVENVOL(6),0(R3)        Save for plugging in.
*
*             DO ALL THE DEB WORK AND GET THE UCB
* ----- >
*
* DEBDVMOD DS    B         DEVICE MODIFIER - FILE MASK
* DEBUCBA  DS    AL3       ADDRESS OF UCB ASSOCIATED WITH THIS DATA
* *                        EXTENT
* DEBBINUM DS    CL2       BIN NUMBER
* DEBSTRCC DS    CL2       CYLINDER ADDRESS FOR THE START OF AN EXTENT.
* DEBSTRHH DS    CL2       TRACK ADDRESS FOR THE START OF AN EXTENT.
* DEBENDCC DS    CL2       CYLINDER ADDRESS FOR THE END OF AN EXTENT.
*
* DEBENDHH DS    CL2       TRACK ADDRESS FOR THE END OF AN EXTENT.
* DEBNMTRK DS    CL2       NUMBER OF TRACKS ALLOCATED TO A GIVEN EXTENT
*
         L     R10,DCBUPD+DCBDEBAD-IHADCB   Load DEB address
         LR    R5,R10                       Addr of DEBBASIC
         LA    R10,DEBBASND-DEBBASIC(,R10)  Find DEBDASD section
         USING DEBDASD,R10            Give the assembler the DEB base
         MVC   SAVEDEB(12),DEBBINUM   Save extent to restore later
*
* --- >     At this point we find the UCB information - below
*
         MVC   UCBADDR(4),0(R10)      UCB Address is 0 off DEBBASIC
         TM    15(R5),X'02'           Is DEB31UCB ON--all 4 bits used?
         BO    NOZERO                 Yes, the UCB is above the line
         MVI   UCBADDR+0,X'00'        No, the UCB is the last 24 bits
NOZERO   DS    0H
         L     R5,UCBADDR             Get the actual UCB address
         MVC   UCBUNIT(2),4(R5)       Get the unit address in UCB
         MVC   UCBVOLS(6),28(R5)      Get the volser in the UCB
*
* --- >     At this point we find the UCB information - above
*
         MODESET KEY=ZERO             Go to key zero to update DEB
         XC    DEBBINUM(12),DEBBINUM  Set extent to CYL 0 and TRK 0
         MVI   DEBNMTRK+1,1           Set extent size as one track
         MODESET KEY=NZERO            Go back to problem progrem key
READ     DS    0H                 Read entire Track 0 into the buffer
         XC    ECBIN,ECBIN        Insure that the ECB is clear
         EXCP  IOBIN              Read track zero
         WAIT  ECB=ECBIN          Wait for the read to complete
         CLI   ECBIN,X'7F'        See if a good read
         BNE   IOERROR            If not good, go abend
         SLR   R8,R8              Clear a work register
         L     R9,F65535          Load max. size that could have read
         ICM   R8,B'0011',CSWIN+6  Load the residual byte count
         SR    R9,R8              Find size of track read
         AR    R9,R11             Find byte after track read
         MVI   0(R9),X'FF'        Mark byte after end as the end
         MODESET KEY=ZERO         Go to key zero to update DEB
         MVC   DEBBINUM(12),SAVEDEB  Restore DEB extent information
         MODESET KEY=NZERO           Go back to problem program key
         CLOSE DCBUPD             We are done with the reading in
         DROP  R10                Don't need DEB address anymore
* ----------------------------------------------------------------- *
*  Print the unit address and the volser taken from the UCB.
* ----------------------------------------------------------------- *
         MVI   OUTLINE-1,X'40'
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+2(11),=C'UCB Unit:  '
         HEX   OUTLINE+14,2,UCBUNIT
         MVC   OUTLINE+22(11),=C'UCB Volser:'
         MVC   OUTLINE+35(6),UCBVOLS
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         PUT   SYSPRINT,OUTLINE
* ----------------------------------------------------------------- *
*  Now, you've got the Track 0 image in the buffer.
*  We copy Record 3 into the proper area, and then ignore records 1
*   and 2.  We update record 3 in place, with modified information,
*   only in the VOLSER field.
* ----------------------------------------------------------------- *
         LR    R9,R11              Load the input track address
         LA    R9,IPLLEN(,R9)      Point to Record 3
         CLI   4(R9),3             Check to see if it is Record 3
         BNE   ERROR1              Not Record 3, error message & quit
*
         MVC   VOL1(VOL1L),4(R9)   Overlay VOL1 area with real VOL1
         MVC   SAVEOVOL(6),16(R9)  Save old VOLSER before change
         MVC   SAVEVTOC(4),24(R9)  Save the VTOC location
         MVC   SAVEREST(92),0(R9)  Save almost entire Record 3
*
         MVI   OUTLINE-1,X'40'
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+2(17),=C'Old VOLSER was:  '
         MVC   OUTLINE+19(6),SAVEOVOL   Plug in old volser
         PUT   SYSPRINT,OUTLINE
         MVI   OUTLINE-1,X'40'
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+2(17),=C'New VOLSER is :  '
         MVC   OUTLINE+19(6),SAVENVOL   Plug in new volser from PARM
         PUT   SYSPRINT,OUTLINE
         MVI   OUTLINE-1,X'40'
         MVC   OUTLINE,OUTLINE-1
*        PUT   SYSPRINT,SAVEREST        Diagnostic
         MVC   OUTLINE,OUTLINE-1
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE+2(38),=C'To make the change permanent, you have'
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+2(38),=C' to VARY the pack OFFLINE and then    '
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+2(38),=C' VARY the pack ONLINE again.          '
         PUT   SYSPRINT,OUTLINE
         B     OUTPARM
NOPARMS  DS    0H                  If no PARM coded, then leave.
         MVI   OUTLINE-1,X'40'
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(35),=C' No parm has been coded in the JCL.'
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(21),=C' Nothing was changed.'
         PUT   SYSPRINT,OUTLINE
OPMSG2   WTO   'ONLC002 No parm was coded in the JCL--Nothing Changed',+
               ROUTCDE=11
         CLOSE SYSPRINT
         OI    FLAG0,X'01'         Show Return Code of 4
         B     GOFREE1             Get out of the program.
NOTAUTHR DS    0H                  If no PARM coded, then leave.
         MVI   OUTLINE-1,X'40'
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(37),=C' You have not been authorized by RACF'
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(21),=C' Nothing was changed.'
         PUT   SYSPRINT,OUTLINE
OPMSG3   WTO   'ONLC003 Not authorized by RACF--Nothing Changed',      +
               ROUTCDE=11
         CLOSE SYSPRINT
         OI    FLAG0,X'01'         Show Return Code of 4
         B     GOFREE1             Get out of the program.
OUTPARM  DS    0H
         CLOSE SYSPRINT
* ----------------------------------------------------------------- *
*   Now, we have to put out the new Track 0 information only for    *
*    Record 3.  Make sure we keep the VTOC location and the rest    *
*    of the record as before.                                       *
* ----------------------------------------------------------------- *
         OPEN  (DCBUPD,UPDAT)         Now OPEN DCB to update Track 0
         L     R10,DCBUPD+DCBDEBAD-IHADCB   Load DEB address
         LA    R10,DEBBASND-DEBBASIC(,R10)  Find DEBDASD section
         USING DEBDASD,R10            Give the assembler the DEB base
         MVC   SAVEDEB(12),DEBBINUM   Save extent to restore later
         MODESET KEY=ZERO             Go to key zero to update DEB
         XC    DEBBINUM(12),DEBBINUM  Set extent to CYL 0 and TRK 0
         MVI   DEBNMTRK+1,1           Set extent size as one track
         MODESET KEY=NZERO            Go back to problem program key
*
OREC1    DS    0H                 Write IPL1
         LA    R1,IPL1            Point to IPL1 record
         LA    R2,IPL1L           Load its length
         STH   R2,CCWUPDO+6       Store key and data length in CCW
         MVI   RO,0               Copy record number to seek
         STCM  R1,7,CCWUPDO+1     Store I/O buffer address in CCW
         MVI   CCWUPDO,X'03'      No-op CCW opcode
         MVC   IOERROR1+X'25'(2),=C'01'  (Diagnostic)
         BAL   R6,EXCP            Write out the record
*
OREC2    DS    0H                 Write IPL2
         LA    R1,IPL2            Point to IPL2 record
         LA    R2,IPL2L           Load its length
         STH   R2,CCWUPDO+6       Store key and data length in CCW
         MVI   RO,1               Copy record number to seek
         STCM  R1,7,CCWUPDO+1     Store I/O buffer address in CCW
         MVI   CCWUPDO,X'03'      No-op CCW opcode
         MVC   IOERROR1+X'25'(2),=C'02'  (Diagnostic)
         BAL   R6,EXCP            Write out the record
*
OVOL1    DS    0H                 Write Record 3
         LA    R1,VOL1            Point to VOL1 record
         LA    R2,VOL1L           Load its length
         STH   R2,CCWUPDO+6       Store key and data length in CCW
         MVI   RO,2               Copy record number to seek
         STCM  R1,7,CCWUPDO+1     Store I/O buffer address in CCW
         MVI   CCWUPDO,X'03'      No-op CCW opcode
         MVC   IOERROR1+X'25'(2),=C'03'  (Diagnostic)
         BAL   R6,EXCP            Write out the record
*
*        B     ENDOFPGM
OVOLS    DS    0H                 Erase record 4 to clear track
         LA    R1,VOLS            Point to DUMMY record
         LA    R2,VOLSL           Load its length
         MVC   VOLSLIT(4),=C'VOL1'
*   plug in new volser here
         MVC   VOLSVOL(6),SAVENVOL   New volser
         MVC   VOLSVTOC(4),SAVEVTOC  Old VTOC location
         MVC   VOLSREST(64),SAVEREST+28  Rest of Record 3
         STH   R2,CCWUPDO+6       Store key and data length in CCW
         MVI   RO,3               Copy record number to seek
         STCM  R1,7,CCWUPDO+1     Store I/O buffer address in CCW
         MVI   CCWUPDO,X'85'      Update in place CCW opcode
         MVC   IOERROR1+X'25'(2),=C'04'  (Diagnostic)
         BAL   R6,EXCP            Overlay the entire Record 3
*
WTO001   DS    0H                 Write to Operator and JES logs
         HEX   WTOUNIT,2,UCBUNIT      Put unit address into message
         MVC   WTOOVOL(6),SAVEOVOL    Put old pack id into message
         MVC   WTONVOL(6),SAVENVOL    Put new pack id into message
         MVC   WTO0ORIG(6),UCBVOLS    Put UCB volser into message
OPMSG0   WTO   'ONLC000 Original (UCB) volume serial is: xxxxxx.',     +
               ROUTCDE=11
OPMSG1   WTO   'ONLC001 Volume Serial for Unit: uuuu changed from xxxxx+
               x to yyyyyy.',ROUTCDE=11
WTO0ORIG EQU   OPMSG0+49,6
WTOUNIT  EQU   OPMSG1+40,4            Proper location
WTOOVOL  EQU   OPMSG1+58,6              in
WTONVOL  EQU   OPMSG1+68,6                mesage
ENDOFPGM DS    0H                 Done. Clean up and get out.
         MODESET KEY=ZERO            Go to key zero to update DEB
         MVC   DEBBINUM(12),SAVEDEB  Restore DEB extent information
         MODESET KEY=NZERO           Go back to problem program key
         DROP  R10                Don't need DEB address anymore
         CLOSE DCBUPD             Close the DCB
GOFREE1  DS    0H
         FREEMAIN R,LV=65536,A=(R11)  Free the GETMAINed buffer
         L     R13,4(,R13)        Restore the caller's save area addr.
         TM    FLAG0,X'01'        Return code 4 ?
         BZ    RET0               No.
RET4     DS    0H
         LM    14,12,12(13)       Return to caller
         LA    R15,4              Return code 4.
         BR    14
RET0     DS    0H
         LM    14,12,12(13)       Return to caller
         LA    R15,0              Return code 0.
         BR    14
*
IOERROR  DS    0H
         WTO   'Input/Output error, Program abending',ROUTCDE=11
         ABEND 1234,DUMP          Abend with a dump
         EJECT
IOERROR1 DS    0H
         WTO   'Input/Output error, Code = xx ',ROUTCDE=11
         ABEND 1235,DUMP          Abend with a dump
         EJECT
ERROR1   DS    0H
         WTO   'Volume id not copied, Program abending',ROUTCDE=11
         ABEND 1248,DUMP          Abend with a dump
         EJECT
*
EXCP     DS    0H                 Routine to write a record.
         ST    R6,SAVER6A         Save BAL register.
         XC    ECBOUT,ECBOUT      Insure that the ECB is clear
         EXCP  IOBOUT             Update or add record to track zero
         WAIT  ECB=ECBOUT         Wait for the update to complete
*        CLI   ECBOUT,X'7F'
         TM    ECBOUT,X'40'       See if a good count-key-data write
*        BNE   IOERROR1           You don't need to test full X'7F'
         BZ    IOERROR1           If not good, go abend
         L     R6,SAVER6A         Restore BAL register.
         BR    R6
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
HEX      DS    0H                HEX Display Routine
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         BR    R9                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
HEXSAVE  DS    3F
SAV9HEX  DS    F
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DCB's, IOB'S, ECB, and CCW's
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
DCBUPD   DCB   DDNAME=DISKUPD,    DD name                              X
               MACRF=E,           MACRO Reference is EXCP              X
               DSORG=PS           Data Set Organization
* DCBLEN   EQU   *-DCBOUT           Length of DCB
SYSPRINT DCB   MACRF=PM,DDNAME=SYSPRINT,DSORG=PS,RECFM=FBA,LRECL=133
*  ---  IOB for Input from Track 0
IOBIN    DS    0D                 Input/output Block
         DC    XL4'40000000'      Command chaining used
         DC    A(ECBIN)           Address of the ECB
CSWIN    DC    D'0'               Channel Status Word
         DC    A(CCWIN)           Address of the channel command string
         DC    A(DCBUPD)          Address of the Data Control Block
         DC    A(0)               IOB Restart
         DC    XL4'0'             Flags and Counters
SEEKI    DC    D'0'               Seek address
SEARCHI  EQU   SEEKI+3,5          Cylinder, Head, and Record to search
CCHHI    EQU   SEEKI+3,4          Cylinder and Head to seek to
CCI      EQU   SEEKI+3,2          Cylinder to seek
HHI      EQU   SEEKI+5,2          Track to seek to
RI       EQU   SEEKI+7,1          Record to search for
CCWIN    CCW   X'31',SEARCHI,X'40',5 Search for record zero
         CCW   8,*-8,0,0          TIC back until search complete
CCWREAD  CCW   X'5E',*-*,X'20',65535  Read track zero with SLI
*  ---  IOB for Output to Track 0
IOBOUT   DS    0D                 Input/output Block for Output
         DC    XL4'40000000'      Command chaining used
         DC    A(ECBOUT)          Address of the ECB
CSWOUT   DC    D'0'               Channel Status Word
         DC    A(CCWOUT)          Address of the channel command string
         DC    A(DCBUPD)          Address of the Data Control Block
         DC    A(0)               IOB Restart
         DC    XL4'0'             Flags and Counters
SEEKO    DC    D'0'               Seek address
SEARCHO  EQU   SEEKO+3,5          Cylinder, Head, and Record to search
CCHHO    EQU   SEEKO+3,4          Cylinder and Head to seek to
CCO      EQU   SEEKO+3,2          Cylinder to seek
HHO      EQU   SEEKO+5,2          Track to seek to
RO       EQU   SEEKO+7,1          Record to search for
CCWOUT   CCW   X'31',SEARCHO,X'40',5 Srch for record before one written
         CCW   8,*-8,0,0          TIC back until search complete
CCWUPDO  CCW   X'1D',*-*,0,*-*    Update key-data,write count-key-data
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Workarea and Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
SAVEAREA DC    18F'0'             Register save area
ECBIN    DC    F'0'               Event Control Block
ECBOUT   DC    F'0'               Event Control Block
SAVEDEB  DS    XL12               Area to save extent after OPEN
SAVER6A  DC    F'0'               BAL register save area
SAVEOVOL DC    CL6' '             Old volser
SAVENVOL DC    CL6' '             New volser
SAVEVTOC DC    XL4'00'            Preserve VTOC location on disk
SAVEREST DC    CL92' '            Rest of Record 3, after VTOC loc.
H8       DC    H'8'               Constant for subtraction
FLAG0    DC    X'00'              X'01' means Return Code of 4
*                                 X'02' means NOT RACF AUTHORIZED
F65535   DC    F'65535'           Buffer size
UCBUNIT  DC    H'0'               Unit address from the UCB
UCBVOLS  DC    CL6' '             Volser from UCB
UCBADDR  DC    F'0'               UCB Address from DEB
MESSAG01 DS    0F                      AREA FOR PRINTING
MESS01L  DC    Y(L'MESSAGC1)           MESSAGE LENGTH
MESSAGC1 DC    CL(69)'ONLC001 Volume Serial for Unit: xxxxxx changed fr+
               om xxxxxx to yyyyyy.'
* ------ >>   below     Init track images
IPL1     DS    0XL36              Canned IPL1 record
IPL1R    DC    X'0000000001'               5
IPL1KL   DC    X'040018'                   3
IPL1K    DC    C'IPL1'                     4   =  12
         DC    X'000A00000000000F'         8
         DC    X'0300000000000001'         8
         DC    X'0000000000000000'         8   =  24 + 12  =  36
IPL1L    EQU   *-IPL1             IPL1 record length incl count
* -----
IPL2     DS    0XL156             Canned IPL2 record
IPL2R    DC    X'0000000002'               5
IPL2KL   DC    X'040090'                   3
IPL2K    DC    C'IPL2'                     4   =  12
         DC    X'07003AB840000006'         8
         DC    X'31003ABE40000005'         8
         DC    X'08003AA000000000'         8
         DC    X'0600000020000000'         8
         DC    X'0000000000000000'         8   =  40 + 12  =  52
         DC    X'000004'                   3   +  52  =  55
         DC    XL101'00'                   101 +  55  = 156
IPL2L    EQU   *-IPL2             IPL2 record length incl count
* -----
IPLLEN   EQU   *-IPL1             Length of both IPL records
* -----
* -----                           VOLS is more used, to replace Rec 3
VOL1     DS    0XL96              VOLUME ID record - will be overlaid
VOL1R    DC    X'0000000003'                  5
VOL1KL   DC    X'040050'                      3
VOL1K    DC    C'VOL1'                        4   =  12
         DC    C'VOL1'                        4
VOL1SER  DC    CL6' '                         6
         DC    C' '                           1
         DC    XL5'0000000101' (LOC OF VTOC)  5   =  16 + 12 = 28
         DC    CL68' '
VOL1L    EQU   *-VOL1             VOL1 record length incl count
* ------ >>   above     Init track images
VOLS     DS    0XL92              Record overlay area for Record 3
VOLSLIT  DC    C'VOL1'            Second "VOL1" in record
VOLSVOL  DC    CL6' '             New VOLSER here.
VOLSFIL1 DC    X'4000'            Filler - necessary
VOLSVTOC DC    XL4'00'            VTOC location to preserve
VOLSREST DC    CL64' '            Rest of Record 3
VOLSL    EQU   *-VOLS
* -----
         DC    CL1' '
OUTLINE  DC    CL133' '           Output line for SYSPRINT
* -----
SAVE1402 DS    6F                 ONE MORE FOR SAFETY
HEADER   DC    CL34'  ONLCLIP - Version 1.5 - &SYSDATE'
HEADERU  DC    CL34'  ------- - ------- --- - --------'
HEADERT  DC    CL34'           "ONLINE CLIP"          '
HEADERX  DC    CL34'     Time and Date of Execution:  '
HEADERD  DC    CL46' Date:                  Time:           '
* ----------------------------------------------------------------- *
*          Work area for time and date display routine              *
* ----------------------------------------------------------------- *
TIMED    DS    CL7
DATED    DS    CL9
DATETIME DS    4F
         ORG   DATETIME
TIME     DS    CL4
         DS    CL4
DATE     DS    CL5
         DS    CL3
         EJECT
***********************************************************************
SAVER1A  DS    F
FACILITY DC    CL8'FACILITY'       RACROUTE CLASS NAME
RESOURCE DC    CL44' '             RACROUTE RESOURCE NAME
RACROUTE RACROUTE REQUEST=FASTAUTH,MF=L RACROUTE LIST FORM
RACWORK  DS    CL512               RACROUTE WORK AREA 1
FRACWORK DS    16F                 RACROUTE WORK AREA 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         LTORG ,                  Insure literals are before the DSECTs
*
         PRINT GEN
         DCBD  DSORG=PS,DEVD=DA   DSECT for the Data Control Block
         IEZDEB LIST=YES          DSECT for the Data Extent Block
         PRINT NOGEN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Register Equates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         REGS  ,                  User Register equate MACRO
         END   ,                  The end of the program
