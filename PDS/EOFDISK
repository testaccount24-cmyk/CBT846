//HERC01E JOB (XXXXXXXX,XXXX,1439,9999,9999),EOFDISK-HERC01,
//             COND=(0,NE),
//             MSGCLASS=C,CLASS=A,NOTIFY=HERC01
//ASMFCL  EXEC PROC=ASMFCL,PARM.LKED='AC=1'  AC=1 needed for PARM=NULL
//SYSLIB   DD
//         DD  DISP=SHR,DSN=SYS1.AMODGEN for MVS 3.8j
//*        DD  DISP=SHR,DSN=SYS1.MODGEN OS/390 and zOS may want instead
PASS     TITLE 'EOFDISK - - - Program to clear disk tracks'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Change log:
*
* 2011-01-01 - PARM=NULL without EMPTY changed to not null the
*  somitcw   - track after the last data record.  There should
*  be an end-of-file record on that track.
*
* 2010-12-26 - PARM=NULL added to erase all records on tracks.
*  somitcw   - No EOF record will be written if PARM=NULL specified.
* No PARM will write EOF record tracks after end-of-file.
* PARM=NULL will erase tracks after end-of-file.
* PARM=EMPTY will write EOF records on all tracks in the data set.
* PARM=(EMPTY,NULL) will erase all tracks in the data set.
* PARM=NULL requires APF authorization to update the DEB to allow
* re-writing record zero to clear the remainder of the track.
*
* 2007-05-24 - PARM=EMPTY requirement added to empty data sets.
* Greg Price - The default is to only empty tracks after end-of-file.
*
*    This program writes End-Of-File records on disk tracks by
* writing record one as an end-of-file record or
* erases all data on a track by writing record zero.
*
*    This program handles multiple extents.
*
*    This program should handle any type of disk.
*
*    This program is slow because it writes one track at at time.
*    This program should write a cylinder at a time, but I was lazy.
*
*    This program works on data sets so does not right
* for pds members.
*
*    QSAM and BSAM put an end-of-file record on the track
* after the last data if there is a track after the last data.
* When using PARM=NULL without EMPTY, this program will not
* null that track because the end-of-file record is needed.
*
*    If using for Hercules CCKD disk volumes to shrink the
* the size of the disk image file:
*
* 1. Use the default of EOF for old CCKD disk image files.
*    By old, I mean created from before 2004 like MVS Tur(n)key #3.
* 2. Use PARM=NULL or PARM=(NULL,EMPTY) for newer CCKD disk volumes.
* 3. After running, you may need to wait minutes, hours, days, weeks,
* months, or years for the CCKD garbage collector to shrink the disk
* image file.
* For immediate shrinking, use Hercules console command: sfc cccu
* Yes, I know that the disk image file is not a shadow file, but
* sfc will work on it anyway.
*
* Sample JCLs:
*
* //HERC01E  JOB (XXXXXXXX,XXXX,1439,9999,9999),EOFDISKJ-HERC01,
* //             MSGCLASS=C,
* //             CLASS=A,NOTIFY=HERC01
* //*
* //* This will erase the largest 25 free
* //*   space extents on a disk volume.
* //* If less than 21 extents on the disk volume, the JOB will
* //*   get a JCL error after all extents are cleared.
* //*
* //EOFDISK1 EXEC PGM=EOFDISK,PARM=NULL
* //OUTPUT  DD  UNIT=SYSDA,VOL=SER=PUB001,
* // SPACE=(TRK,1,,ALX),DISP=(,PASS)
* //EOFDISK2 EXEC PGM=EOFDISK,PARM=NULL
* //OUTPUT  DD  UNIT=SYSDA,VOL=SER=PUB001,
* // SPACE=(TRK,1,,ALX),DISP=(,PASS)
* //EOFDISK3 EXEC PGM=EOFDISK,PARM=NULL
* //OUTPUT  DD  UNIT=SYSDA,VOL=SER=PUB001,
* // SPACE=(TRK,1,,ALX),DISP=(,PASS)
* //EOFDISK4 EXEC PGM=EOFDISK,PARM=NULL
* //OUTPUT  DD  UNIT=SYSDA,VOL=SER=PUB001,
* // SPACE=(TRK,1,,ALX),DISP=(,PASS)
* //EOFDISK5 EXEC PGM=EOFDISK,PARM=NULL
* //OUTPUT  DD  UNIT=SYSDA,VOL=SER=PUB001,
* // SPACE=(TRK,1,,ALX),DISP=(,PASS)
*
* //HERC01E  JOB (XXXXXXXX,XXXX,1439,9999,9999),EOFDSET-HERC01,
* //             MSGCLASS=C,
* //             CLASS=A,NOTIFY=HERC01
* //*
* //* This will erase the unused tracks of a PDS or
* //*   sequential data set while preserving data.
* //*
* //EOFDISK  EXEC PGM=EOFDISK,PARM=NULL
* //OUTPUT   DD  DISP=OLD,DSN=A.REAL.DATA.SET
* //*
*
* //HERC01E  JOB (XXXXXXXX,XXXX,1439,9999,9999),EMPTYSEQ-HERC01,
* //             MSGCLASS=C,
* //             CLASS=A,NOTIFY=HERC01
* //*
* //* This will empty and erase a sequential data set.
* //* ( Note that a PDS processed this way will be unusable. )
* //*
* //EOFDISK  EXEC PGM=EOFDISK,PARM=(NULL,EMPTY)
* //OUTPUT   DD  DISP=OLD,DSN=A.SEQ.DATA.SET
* //
*
* Blame: somitcw @ yahoo.com
*
* Empty Blame: Greg. Price
*              at
*              optushome. com. au
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         MACRO
         REGS  ,
         LCLA  &NUMBER
.LOOP    ANOP
R&NUMBER EQU   &NUMBER            Register equate for register &NUMBER
&NUMBER  SETA  &NUMBER+1
         AIF   (16 GT &NUMBER).LOOP
         MEND
*
         PRINT ON,GEN,DATA        Always print everything
EOFDISK  CSECT ,
         USING *,R15              Set temporary base register
         SAVE  (14,12),,EOFDISK.&SYSDATE..&SYSTIME  Save Reg.s
         LA    R12,SAVEAREA       Load address of new save area
         ST    R12,8(,R13)        Connect old and new save areas
         ST    R13,4(,R12)        Connect old and new save areas
         LR    R13,R12            Connect old and new save areas
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING EOFDISK,R12        Give the assembler the new base
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Process program parameter if specified
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         L     R1,0(,R1)          Point to the program parameter
         CLC   H0,0(R1)           Any parameter?
         BE    PARMOK             No, that's fine
         CLC   H4,0(R1)           Possible PARM=NULL length
         BE    PARM4              Yes, go set flag for PARM=NULL
         CLC   H5,0(R1)           Possible PARM=EMPTY length
         BE    PARM5              Yes, go set flag for PARM=EMPTY
         CLC   H10,0(R1)          Possible PARM='EMPTY,NULL' length
         BE    PARM10             Yes, go set flag for PARM=EMPTY
         BNE   PARMBAD            No, non-valid PARM length
PARM4    DS    0H
         CLC   2(4,R1),PARMNUEM   Expected PARM=NULL
         BNE   PARMBAD            No, go give error message and bomb
         OI    FLAG,NULL          Flag NULL request
         B     PARMNULL           Go update CCW string for PARM=NULL
PARM5    DS    0H
         CLC   2(5,R1),PARMEMNU   Expected PARM=EMPTY
         BNE   PARMBAD            No, go give error message and bomb
         OI    FLAG,EMPTY         Flag EMPTY request
         B     PARMOK             Go to main part of program
PARM10   DS    0H
         CLC   2(10,R1),PARMEMNU  See if PARM=(EMPTY,NULL)
         BE    PARMBOTH           Yes, go set flag for both
         CLC   2(10,R1),PARMNUEM  See if PARM=(NULL,EMPTY)
         BNE   PARMBAD            No, go give error message and bomb
*        B     PARMBOTH           Yes, go set flag for both
PARMBOTH DS    0H
         OI    FLAG,EMPTY+NULL    Set flag for both NULL and EMPTY
PARMNULL DS    0H
         MVC   CCW(8),CCWSHA      Update the CCW string for PARM=NULL
         MVC   CCW+16(8),CCWWR0   Update the CCW string for PARM=NULL
PARMOK   DS    0H                 Parameter processing complete
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Locate the TIOT entry for the OUTPUT file
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         L     R4,540             Point to the current TCB ?PSATOLD?
         L     R4,12(,R4)         Point to the TIOT ?TCBTIO?
         LA    R4,24(,R4)         Point to first TIOT entry
         SLR   R5,R5              Prepare for insert
TIOTLOOP DS    0H
         CLI   0(R4),0            Reached end of TIOT?
         BE    NODD               Yes, required file not allocated
         CLC   4(8,R4),DCB+DCBDDNAM-IHADCB
         BE    GOTTIOTE           Found the right TIOT entry
         IC    R5,0(,R4)          Get TIOT entry length
         AR    R4,R5              Point to the next TIOT entry
         B     TIOTLOOP           Go check it out
GOTTIOTE DS    0H
         ICM   R5,7,17(R4)        Point to the UCB
         BZ    NOTDASD            No UCB means can't be DASD
         CLI   18(R5),X'20'       DASD?
         BNE   NOTDASD            No, not much more to do here
         MVC   VOLSER,28(R5)      Yes, copy the Volume Serial Number
*        CLI   VOLSER,C' '        VIO?
*        BNH   NOTDASD            Yes, don't bother
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Determine the data set name of the OUTPUT file
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         RDJFCB SAMDCB            Copy the JFCB to working storage
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Obtain the VTOC entry
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         OBTAIN OBTAIN            Fetch the VTOC entry
         LTR   R15,R15            Success?
         BNZ   OBTAINER           No, OBTAIN failed, go abend with msg.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Prevent destruction of formatted SYSCTLG
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         CLC   =CL8'SYSCTLG ',JFCBDSNM  See if DSN=SYSCTLG
         BNE   NOTCVOL            No, then not an active OS catalog
         CLC   =X'0000FF',DS1LSTAR  See if VTOC says CVOL is formated
         BE    ISCVOL             Is a formated CVOL, go abend with msg
NOTCVOL  DS    0H
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Determine the number of used tracks
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         SLR   R10,R10            Clear a work register
         ICM   R10,7,DS1LSTAR     Ascertain last addressable record
         BZ    GOTTRKS            Empty data set
         SRL   R10,8              Shift out R to convert TTR to TT
         LA    R10,2(,R10)        Relative to track number + EOF track
GOTTRKS  DS    0H
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Empty the data set if requested by parameter
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         TM    FLAG,EMPTY         EMPTY requested?
         BNO   EMPTYOK            No, preserve any data if PS or PO
         LTR   R10,R10            Empty according to VTOC?
         BZ    EMPTYOK            Yes, no need for extra I/O
         OPEN  (SAMDCB,OUTPUT)    No, so overwrite data...
         CLOSE SAMDCB             ... with EOF mark
         LA    R10,1              Preserve track with EOF record
EMPTYOK  DS    0H                 EMPTY processing complete
         ST    R10,KEEPTRKS       Save number of tracks to preserve
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Perform main processing
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         OPEN  (DCB,OUTPUT)       Open the file to be cleared
         L     R10,DCB+DCBDVTBL-IHADCB  Load Dev.Char.Table Address
         MVC   TRACKS,2(R10)      Save number of tracks on a cylinder
         L     R10,DCB+DCBDEBAD-IHADCB  Load DEB address
         SLR   R9,R9              Clear extent counter
         IC    R9,16(,R10)        Load the number of extents
         LA    R7,0               Set initial extent number
NEXTEXTN DS    0H
         LTR   R9,R9              See if no more extents
         BZ    ENDOFJOB           If not, go return to caller
         BCTR  R9,0               Subtract one from extent number
*  Calculate the Extent
         LR    R10,R7             Load the extent number
         SLL   R10,4              Multiply by 16 for displacement
         LA    R10,32(,R10)       Add DEB header length to displacement
         A     R10,DCB+DCBDEBAD-IHADCB  Add the base DEB address
         TM    FLAG,NULL          See if record zero must be written
         BNO   SAVEEXT            No, go save the extent CCHH
         MODESET KEY=ZERO         Must update DEB
         OI    0(R10),X'C0'       Change extent to allow Write Record 0
         MODESET KEY=NZERO        Switch back to normal key
SAVEEXT  DS    0H                 *
         MVC   CCHH,6(R10)        Set seek for beginning of extent
         STC   R7,SEEK            Set extent number
         LA    R7,1(,R7)          Bump extent number
KEEPCHK  DS    0H
         ICM   R1,15,KEEPTRKS     Get track count still to skip
         BZ    WRITE              Do not skip any more tracks
         BCTR  R1,0               Decrement track-to-keep count
         ST    R1,KEEPTRKS        Save updated count
         B     TRKDONE            Do not clear this track
WRITE    DS    0H
         MVC   COUNTEOF(4),CCHH   Set COUNT CCHH incase PARM isn't NULL
         MVC   COUNTNUL(4),CCHH   Set COUNT CCHH incase PARM=NULL
         XC    ECB,ECB            Ensure that the ECB is clear
         EXCP  IOB                Write record, EOF or new record zero
         WAIT  ECB=ECB            Wait for the write to complete
         CLI   ECB,X'7F'          See if a good write
         BNE   IOERROR            If not good, go abend
TRKDONE  DS    0H
* Last track is cleared, next track number is needed
         CLC   CCHH,10(R10)       See if at end of an extent
         BNL   NEXTEXTN           If at end, go find next extent
         ICM   R8,3,HH            Load current track number
         LA    R8,1(,R8)          Bump to the next track
         CLM   R8,3,TRACKS        See if past last track on a cylinder
         BNL   NEWCYL             If past cyl. end, go to next cylinder
         STCM  R8,3,HH            Store the new track number
         B     KEEPCHK            Go to write the next record
*
NEWCYL   DS    0H
         ICM   R8,3,CC            Load the current cylinder number
         LA    R8,1(,R8)          Bump to the next cylinder
         STCM  R8,3,CC            Save the new cylinder number
         XC    HH,HH              Clear the track number
         B     KEEPCHK            Go to write the next record
*
ENDOFJOB DS    0H
         CLOSE DCB                Close the file
         SLR   R15,R15            Success
RETURN   DS    0H
         L     R13,4(,R13)        Restore the caller's save area addr.
         RETURN (14,12),RC=(15)   Return to caller
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Error messages and abend routines
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
PARMBAD  DS    0H
         WTO  'EOFDISK - PARM other than EMPTY or NULL specified',     +
               ROUTCDE=11
         BAL   R11,ABENDING       Issue "program abending WTO"
         ABEND 1111               Abend with a U1111, no DUMP, no STEP
*
NODD     DS    0H
         WTO   'EOFDISK - Required //OUTPUT DD is missing',ROUTCDE=11
         BAL   R11,ABENDING       Issue "program abending WTO"
         ABEND 1112               Abend with a U1112, no DUMP, no STEP
*
NOTDASD  DS    0H
         WTO   'EOFDISK - OUTPUT DD points to a non-DASD',ROUTCDE=11
         BAL   R11,ABENDING       Issue "program abending WTO"
         ABEND 1113               Abend with a U1113, no DUMP, no STEP
*
OBTAINER DS    0H                 OBTAIN error
         STC   R15,OBTAINRC       Store OBTAIN's return code
         UNPK  WTO20RC(3),OBTAINRC(2)  Convert return code to display
         TR    WTO20RC,HEX-C'0'   Show OBTAIN return code (in hex)
         MVI   WTO20RC+2,C' '     Clear byte after return code
         MVC   WTO20VOL,VOLSER    Show Volume Serial Number
         WTO   MF=(E,WTO20)       Issue message
         WTO   'EOFDISK - Does data set exist on disk?',ROUTCDE=11
         BAL   R11,ABENDING       Issue "program abending WTO"
         ABEND 1114               Abend with a U1114, no DUMP, no STEP
*
ISCVOL   DS    0H
         WTO   'EOFDISK - Will not clear a formated SYSCTLG',          +
               ROUTCDE=(2,9,11)
         BAL   R11,ABENDING       Issue "program abending WTO"
         ABEND 1115               Abend with a U1115, no DUMP, no STEP
*
IOERROR  DS    0H
         WTO   'EOFDISK - I/O error, Program abending',ROUTCDE=11
         BAL   R11,ABENDING       Issue "program abending WTO"
         ABEND 1116,DUMP          Abend with a U1116, DUMP, no STEP
*
ABENDING DS    0H
         WTO   'EOFDISK - Program abending',ROUTCDE=11
         BR    11                 Return to error routine
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DCB's, IOB'S, ECB, and CCW's
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         PRINT ON,GEN,DATA        Always print everything
SAMDCB   DCB   DDNAME=OUTPUT,DSORG=PS,MACRF=(WP),EXLST=EXITLIST
DCB      DCB   DDNAME=OUTPUT,     DD name                              X
               DSORG=PS,          Data Set Organization                X
               MACRF=E            MACRO Reference is EXCP
DCBLEN   EQU   *-DCB              Length of DCB
         PRINT ON,GEN,DATA        Always print everything
IOB      DS    0D                 Input/output Block
         DC    XL4'40000000'      Command chaining used
         DC    A(ECB)             Address of the ECB
CSW      DC    D'0'               Channel Status Word
         DC    A(CCW)             Address of the channel command string
         DC    A(DCB)             Address of the Data Control Block
         DC    A(0)               IOB Restart
         DC    XL4'0'             Flags and Counters
SEEK     DC    D'0'               Seek address
SEARCH   EQU   SEEK+3,5           Cylinder, Head, and Record to search
CCHH     EQU   SEEK+3,4           Cylinder and Head to seek to
CC       EQU   SEEK+3,2           Cylinder to seek
HH       EQU   SEEK+5,2           Track to seek to
R        EQU   SEEK+7,1           Record to search for
CCW      CCW   X'31',SEARCH,X'40',5 Search for record before one writen
         CCW   8,*-8,0,0          TIC back until search complete
         CCW   X'1D',COUNTEOF,0,8 Write the EOF record
*
CCWSHA   CCW   X'39',COUNTNUL,X'40',4  Search Home Address equal
CCWWR0   CCW   X'15',COUNTNUL,0,16  Write record zero
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Workarea and Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
SAVEAREA DC    18F'0'             Register save area
HEX      DC    CL16'0123456789ABCDEF'
EXITLIST DC    XL1'87',AL3(JFCB)  End of list and RDJFCB exit list
ECB      DC    F'0'               Event Control Block
COUNTEOF DC    XL8'0000000001000000'  Count area CCHHRKLL
*                  CCCCHHHHRRKKLLLL   Cyl,Head,record#,Key-len,data-len
COUNTNUL DC    XL16'00000000000000080000000000000000'  New record zero
*                   CCCCHHHHRRKKLLLLDDDDDDDDDDDDDDDD   New record zero
TRACKS   DC    H'0'               Number of tracks on a cylinder
VOLSER   DC    CL6' '             Volume Serial Number
H0       DC    H'0'               PARM length for no PARM
H4       DC    H'4'               PARM length for PARM=NULL
H5       DC    H'5'               PARM length for PARM=EMPTY
H10      DC    H'10'              PARM length for PARM='EMPTY,NULL'
PARMEMNU DC    CL10'EMPTY,NULL'   Compare for PARM=EMPTY or EMPTY,NULL
PARMNUEM DC    CL10'NULL,EMPTY'   Compare for PARM=NULL  or NULL,EMPTY
FLAG     DC    X'00'              Flag byte
EMPTY    EQU   X'80'              PARM=EMPTY specified
NULL     EQU   X'40'              PARM=NULL  specified
OBTAINRC DS    XL1                OBTAIN's return code for error
KEEPTRKS DC    A(*-*)             Number of tracks to not overwrite
F1DSCB   DC    CL140'DSCB AREA'   44 byte data set name, 96 bytes DSCB1
JFCB     DC    CL176'JFCB AREA'   JOB File Control Block area
OBTAIN   CAMLST SEARCH,JFCBDSNM,VOLSER,F1DSCB
WTO20    WTO   'EOFDISK - VTOC OBTAIN failure RC=xx VOL=SER=volser',   +
               ROUTCDE=11,MF=L    WTO list format for OBTAIN error
WTO20RC  EQU   WTO20+37,2,C'C'    Will be the return code from OBTAIN
WTO20VOL EQU   WTO20+48,6,C'C'    Will be the output data set volser
*
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         LTORG ,                  Ensure literals are before the DSECTs
*
         DC    0D'0'              End of CSECT
*
         PRINT ON,GEN,DATA        Always print everything
*
         ORG   F1DSCB-44          Overlay Format 1 DSCB area in CSECT
         IECSDSL1 (1)             DSECT for Format-1 DSCB (VTOC entry)
         ORG   ,                  Reset the location counter to normal
*
         ORG   JFCB               Overlay JFCB area in CSECT
         IEFJFCBN LIST=YES        DSECT for Job File Control Block
         ORG   ,                  Reset the location counter to normal
*
         DCBD  DSORG=PS,DEVD=DA   DSECT for the Data Control Block
*
         IEZDEB LIST=YES          Data Extent Block
*
* Bit definitions for File Mask
*
* C0 Write control bits...
* 00 ...inhibit write HA/R0
* 40 ...inhibit all writes
* 80 ...write update only
* C0 ...allow all writes
* 20 Reserved bits - must be 0
* 18 Seek control bits...
* 00 ...allow all seek/recalib
* 08 ...allow seek cyl/head
* 10 ...allow seek head only
* 18 ...inhibit seek and MT
* 06 Access auth bits...
* 00 ...normal authorization
* 02 ...device support auth
* 04 ...diagnostic auth
* 06 ...device support with no correction or retry
*
*
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Register Equates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         REGS  ,                  User Register equate MACRO
         END   ,                  The end of the program
//LKED.SYSLMOD DD DISP=SHR,DSN=SYS2.LINKLIB
 NAME EOFDISK     (R)
//*
//CHECKCC EXEC PGM=IEFBR14
//
