//HERC01T  JOB (XXXXXXXX,XXXX,1439,9999,9999),TRK0UPD-SOMITCW,
//             MSGCLASS=C,CLASS=A,
//             NOTIFY=HERC01,COND=(0,NE)
//ASMFCL  EXEC PROC=ASMFCL
//SYSLIB   DD
//         DD  DISP=SHR,DSN=SYS1.AMODGEN
PASS     TITLE 'TRK0UPD - - - Program to re-write a disk track 0'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This reads an input file with disk volume track zero
* records 1, 2, and 4 through the end of the track and
* updates records 1 and 2 on disk and writes new records 4
* through end of a disk volume track 0.
* Using program TRK0SAVE followed by this program is a
* way to copy IPLTEXT and Boot-strap information from one
* disk to another.
*
* Sample JCL:
*
* //HERC01T  JOB (xxxxxxxx,xxxx,1439,9999,9999),TRK0UPDJ-HERC01,
* //             MSGCLASS=x,CLASS=x,NOTIFY=HERC01
* //TRK0UPD EXEC PGM=TRK0UPD
* //SYSUDUMP DD  SYSOUT=*
* //DISKIN   DD  DISP=SHR,DSN=HERC01.IPLTEXT.MVS38J
* //DISKUPD  DD  UNIT=SYSDA,SPACE=(TRK,0),VOL=SER=RES38J
*
* Blame: somitcw@yahoo.com
*
* Extracted from DSF Users Guide r16
* Table 26.
*
*  Maximum Size Permitted for
*  the IPL Program Record
*  Maximum Bytes
* Volume Type for IPL Program
* 2311      3,110
* 2314      6,514
* 2319      6,514
* 3340      7,286
* 3344      7,286
* 3330-1   12,117
* 3330-11  12,117
* 2305-1   12,180
* 2305-2   13,616
* 3350     17,902
* 3375     33,984
* 3380     44,948
* 9345     49,938
* 3390     53,450
*
*   The format read by this program does NOT match
* what ICKDSF write IPLTEXT ABSFORMAT expects.
*
* ABSFORMAT wants three or more undefined records.
* The first must be 24 ( X'18' ) bytes.
* The second must be 144 ( X'90' ) bytes.
* The others are written after the volume label as is.
*
* This program includes count and key fields so:
* The first must be 36 bytes ( C+K+D 8+4+24 ).
* The second must be 156 bytes ( C+K+D 8+4+144 ).
* Others are eight bytes larger than data for the
* count field.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         MACRO
         REGS  ,
         LCLA  &COUNT
.LOOP    ANOP
R&COUNT  EQU   &COUNT             Register equate for register &COUNT
&COUNT   SETA  &COUNT+1
         AIF   (16 GT &COUNT).LOOP
         MEND
         SPACE
         PRINT ON,GEN,DATA
TRK0UPD  CSECT ,
         USING *,R15              Set temporary base register
         SAVE  (14,12),,TRK0UPD.&SYSDATE..&SYSTIME  Save Reg.s
         LA    R12,SAVEAREA       Load address of new save area
         ST    R12,8(,R13)        Connect old and new save areas
         ST    R13,4(,R12)        Connect old and new save areas
         LR    R13,R12            Connect old and new save areas
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING TRK0UPD,R12        Give the assembler the new base
         OPEN  (DCBOUT,UPDAT)     Open output disk volume
*
* DEBDVMOD DS    B         DEVICE MODIFIER - FILE MASK
* DEBUCBA  DS    AL3       ADDRESS OF UCB ASSOCIATED WITH THIS DATA
* *                        EXTENT
* DEBBINUM DS    CL2       BIN NUMBER
* DEBSTRCC DS    CL2       CYLINDER ADDRESS FOR THE START OF AN EXTENT.
* DEBSTRHH DS    CL2       TRACK ADDRESS FOR THE START OF AN EXTENT.
* DEBENDCC DS    CL2       CYLINDER ADDRESS FOR THE END OF AN EXTENT.
*
* DEBENDHH DS    CL2       TRACK ADDRESS FOR THE END OF AN EXTENT.
* DEBNMTRK DS    CL2       NUMBER OF TRACKS ALLOCATED TO A GIVEN EXTENT
*
         L     R10,DCBOUT+DCBDEBAD-IHADCB  Load DEB address
         LA    R10,DEBBASND-DEBBASIC(,R10)  Find DEBDASD section
         USING DEBDASD,R10        Give the assembler the DEB base
         MVC   SAVEDEB(12),DEBBINUM Save extent to restore later
         MODESET KEY=ZERO         Go to key zero to update DEB
         XC    DEBBINUM(12),DEBBINUM  Set extent to CYL 0 and TRK 0
         MVI   DEBNMTRK+1,1       Set extent size as one track
         MODESET KEY=NZERO        Go back to problem progrem key
         OPEN  (DCBIN,INPUT)      Open input data set
GET      DS    0H
         GET   DCBIN              Get a disk block
         L     R2,DCBIN+DCBLRECL-IHADCB-2  Load length of block read
         LA    R2,0(,R2)          Make certain that it's not negative
* If record number less than 3, set command code x'0D'
* If record number greater than 3,set command code X'1D' and
* back up seek/search record number by one.
         CLI   4(R1),3            See if after record 3 input block
         BH    FORMAT             Record 4 through 255, format write
         SH    R2,H8              Subtract count length for update
         STH   R2,CCWUPD+6        Store key and data length in CCW
         MVC   R,4(R1)            Copy record number to seek
         LA    R1,8(,R1)          Point to key and data part of input
         ST    R1,CCWUPD          Store I/O buffer address in CCW
         MVI   CCWUPD,X'0D'       Update key and data in place write
         B     EXCP               Go update a disk record
FORMAT   DS    0H
         STH   R2,CCWUPD+6        Store count-key-data length in CCW
         IC    R2,4(,R1)          Load the record number to write
         BCTR  R2,R0              Decrement record by one
         STC   R2,R               Store rec.no.to search for for write
         ST    R1,CCWUPD          Store I/O buffer address in CCW
         MVI   CCWUPD,X'1D'       Format write full count, key, data
*
EXCP     DS    0H
         XC    ECB,ECB            Insure that the ECB is clear
         EXCP  IOB                Update or add record to track zero
         WAIT  ECB=ECB            Wait for the update to complete
         CLI   ECB,X'7F'          See if a good update or format write
         BNE   IOERROR            If not good, go abend
         B     GET                Go back to get another record
*
ENDOFPGM DS    0H
         MODESET KEY=ZERO         Go to key zero to update DEB
         MVC   DEBBINUM(12),SAVEDEB  Restore DEB extent information
         MODESET KEY=NZERO        Go back to problem program key
         DROP  R10                Don't need DEB address anymore
         CLOSE DCBOUT             Close output file, ignore if abend
         CLOSE DCBIN              Close input file
         L     R13,4(,R13)        Restore the caller's save area addr.
         RETURN (14,12),RC=0      Return to caller
*
IOERROR  DS    0H
         WTO   'Input/Output error, Program abending',ROUTCDE=11
         ABEND 1234,DUMP          Abend with a dump
         EJECT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DCB's, IOB'S, ECB, and CCW's
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
DCBIN    DCB   DDNAME=DISKIN,     DD name                              X
               DSORG=PS,          Data Set Organization                X
               EODAD=ENDOFPGM,    End-of-data-address = end-of-program X
               MACRF=GL           MACRO Reference is PUT,MOVE        X
*              RECFM=U,           Record format is undefined         X
*              LRECL=0,           Logical record length nonexsistant X
*              BLKSIZE=32760      Block size is maximum
         SPACE
DCBOUT   DCB   DDNAME=DISKUPD,    DD name                              X
               MACRF=E,           MACRO Reference is EXCP              X
               DSORG=PS           Data Set Organization
* DCBLEN   EQU   *-DCBOUT           Length of DCB
IOB      DS    0D                 Input/output Block
         DC    XL4'40000000'      Command chaining used
         DC    A(ECB)             Address of the ECB
CSW      DC    D'0'               Channel Status Word
         DC    A(CCW)             Address of the channel command string
         DC    A(DCBOUT)          Address of the Data Control Block
         DC    A(0)               IOB Restart
         DC    XL4'0'             Flags and Counters
SEEK     DC    D'0'               Seek address
SEARCH   EQU   SEEK+3,5           Cylinder, Head, and Record to search
CCHH     EQU   SEEK+3,4           Cylinder and Head to seek to
CC       EQU   SEEK+3,2           Cylinder to seek
HH       EQU   SEEK+5,2           Track to seek to
R        EQU   SEEK+7,1           Record to search for
CCW      CCW   X'31',SEARCH,X'40',5 Search for record before one writen
         CCW   8,*-8,0,0          TIC back until search complete
CCWUPD   CCW   *-*,*-*,0,*-*      Update key-data,write count-key-data
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Workarea and Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
SAVEAREA DC    18F'0'             Register save area
ECB      DC    F'0'               Event Control Block
SAVEDEB  DS    XL12               Area to save extent after OPEN
H8       DC    H'8'               Constant for subtraction
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         LTORG ,                  Insure literals are before the DSECTs
*
         PRINT GEN
         DCBD  DSORG=PS,DEVD=DA   DSECT for the Data Control Block
         IEZDEB LIST=YES          DSECT for the Data Extent Block
         PRINT NOGEN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Register Equates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         REGS  ,                  User Register equate MACRO
         END   ,                  The end of the program
//LKED.SYSLMOD DD DISP=SHR,DSN=SYS2.LINKLIB
 SETCODE AC(1)
 NAME TRK0UPD(R)
//*
//CHECKCC EXEC PGM=IEFBR14
//
